import "operations.eol";
import "DynamicView.etl";
import "StaticView.etl";
import "DeploymentView.etl";

rule Model
    transform model1 : UML!Model
    to model2 : FUML!Model {

    	model2.name = model1.name;
    	
    	doPackage("staticView-components", "StaticViewPackage", model1, model2);
    	doPackage("deploymentView", "DeploymentViewPackage", model1, model2);
    	doPackage("dynamicView", "Package", model1, model2);
    	
    	
    	"Model creation completed".println();

    	"Starting UseCase Transformation...".println();
    	"TODO".println();
    	"TODO: Stereotypes".println();
    	
	}

@lazy
rule Package
    transform elem1 : UML!Package
    to elem2 : FUML!Package {
		elem1.convertToFutureModel(elem2);
	}
	
@lazy
rule DeploymentViewPackage
    transform deploymentView1 : UML!Package
    to deploymentView2 : FUML!Package {
    	
    	deploymentView2.name = deploymentView1.name;
    
		for (pe1 : UML!Artifact in deploymentView1.getPackagedElements()) {
			var pe2 = pe1.equivalent();
			deploymentView2.getPackagedElements().add(pe2);
		}

		for (pe1 : UML!Node in deploymentView1.getPackagedElements()) {
			var pe2 = pe1.equivalent();
			deploymentView2.getPackagedElements().add(pe2);
		}

	}
	
@lazy
rule StaticViewPackage
    transform staticView1 : UML!Package
    to staticView2 : FUML!Package {
		"staticView".println();
		
		staticView2.name =staticView1.name;
		
		for (pe1 : UML!Interface in staticView1.getPackagedElements()) {
			var pe2 = pe1.equivalent();
			if (pe2.isDefined()) {
				staticView2.getPackagedElements().add(pe2);
			}
		}

		for (pe1 : UML!Usage in staticView1.getPackagedElements()) {
			var pe2 = pe1.equivalent();
			if (pe2.isDefined()) {
				staticView2.getPackagedElements().add(pe2);
			}
		}	
		
		for (pe1 : UML!Component in staticView1.getPackagedElements()) {
			var pe2 = pe1.equivalent();
			if (pe2.isDefined()) {
				staticView2.getPackagedElements().add(pe2);
			}
		}	
	}


	




